# **************************************************************************
# SoWin/configure.in

AC_INIT(src/Inventor/Win/SoWin.h)
AC_CONFIG_AUX_DIR(cfg)
AC_CANONICAL_SYSTEM

SIM_AC_SETUP_MSVC_IFELSE([],
[  case $host in
  *-cygwin)
    AC_MSG_ERROR([You need Microsoft Visual C++ to build SoWin on Cygwin])
    ;;
  esac
])

# **************************************************************************
# *******  MAKING RELEASES  ************************************************
# **************************************************************************
#
# Library versioning
# ==================
#
# When making releases, follow these rules:
#
#  * if there has been made any incompatible changes to the ABI¹:
#    SOWIN_MAJOR_VERSION += 1, SOWIN_MINOR_VERSION = 0,
#    SOWIN_MICRO_VERSION = 0.
#
#    (If you don't know if the changes that have been made since last
#    release is binary incompatible with the last ABI, you shouldn't
#    be making releases.)
#
#  * if there has been made additions to the API², but the ABI
#    is still backwards compatible: SOWIN_MAJOR_VERSION unchanged,
#    SOWIN_MINOR_VERSION += 1, SOWIN_MICRO_VERSION = 0.
#
#  * for bugfix releases and other changes which do not change the interface
#    at all, keep SOWIN_MAJOR_VERSION and SOWIN_MINOR_VERSION unchanged
#    and SOWIN_MICRO_VERSION += 1.
#
# Note that our MAJOR.MINOR.MICRO versioning scheme differs somewhat from
# the idea of library versioning applied by Libtool. According to Libtool,
# libraries should be versioned according to a CURRENT.AGE.REVISION scheme.
# Here CURRENT is supposed to be increased by 1 each time the API changes,
# and AGE increased by 1 along with CURRENT each time the API changes in a
# way which keeps the ABI backwards compatible. If compatibility is broken,
# AGE is set to 0 (while CURRENT is still increased by 1). The REVISION
# number has the same semantics as our MICRO number.
#
# To cooperate in a painless way with Libtool, we choose to "convert" our
# MAJOR.MINOR.MICRO scheme to Libtool's idea of versioning like this:
#
#    * Libtool's CURRENT number is increased when our MAJOR number is
#      increased.
#
#    * Libtool's AGE number is always kept at 0 (i.e. we will never make
#      ABI compatible releases where we increase the MAJOR number).
#
#    * Libtool's REVISION number will be a combination of our MINOR and
#      MICRO number, like this: REVISION = MINOR * 100 + MICRO, so we get
#      a REVISION number monotonically increasing in the way we want.
#
#      Note that this little "simplification" has two important
#      ramifications: 1) we can't make more than 99 bugfix-releases of
#      the library unless a MINOR or MAJOR version increase has happened,
#      2) we need to keep a release history log to map from Libtool numbers
#      back to our "native" MACRO.MINOR.MICRO versioning, as Libtool encodes
#      the filename of the library with it's own CURRENT.AGE.REVISION scheme.
#      This way it'll still be easy for us to find out which version a
#      bugreport belongs to: we must tell the user to check out the full
#      filename of the library, then we can just look up the MAJOR.MINOR.MICRO
#      number from the release history log below.
#
#
# **************************************************************************
# CVS maintenance
# ===============
#
# When making a release from the HEAD branch, increase the MAJOR number
# and make a new branch as follows (from the HEAD):
#
#   $ cd [sowin_srcdir_HEADbranch]
#   $ cvs tag -b sowin-MAJOR-0
#
# (The explicit mention of "sowin" in the branch name is necessary
# because we also tag this name onto all included CVS modules.)
#
# Note that new releases from the HEAD branch should only happen when
# there has been incompatible interface changes.
#
#
# When adding new functionality while keeping backward ABI compatibility,
# increase the MINOR number and make a new branch as follows:
#
#   $ cd [sowin_srcdir_MAJORbranch]
#   $ cvs tag -b sowin-MAJOR-MINOR
#
# (Where MINOR>0 always).
#
#
# Bugfix releases should be handled by setting a tag on the
# sowin-MAJOR-MINOR with the latest MAJOR.MINOR.x release,
# like this:
#
#   $ cd [sowin_srcdir_MAJORMINORbranch]
#   $ cvs tag sowin-MAJOR-MINOR-MICRO
#
# (Where MICRO>0 always).
#
# **************************************************************************
# Distribution binaries
# =====================
#
#  * MSWindows SDK: this is constructed as a self-extracting InstallShield
#    package. Run ``configure'' and ``make install'' on an MSWin-box with
#    the correct setup (latest Cygwin, MSVC++ v6.0 and InstallShield Express
#    v2.12), then execute
#
#         $ cd [sowin_builddir]/build
#         $ make ispkg
#
#    (Installshield's IsxBuild.exe need to be in your path.)
#
#    A self-extracting executable SETUPEX.EXE with the InstallShield install
#    should then be available under [sowin_builddir]/build/sowin/. Move
#    to <ftp://ftp.sim.no/pub/coin/bin/win32/sowin-@SOWIN_VERSION@.exe>.
#
#  * RPM packages: follow the instructions at the top of the
#    build/sowin.spec.in file, make one package for each major platform
#    version we have access to (RedHat v5, v6, v7, Mandrake?, SuSE, etc)
#    for the architectures we want (i386, ...). Place packages under
#    <ftp://ftp.sim.no/pub/coin/bin/[platform]/[arch]/>.
#
# **************************************************************************
# Release history
# ===============
#
# Release version     | Libtool version   |                 |
# (MAJOR.MINOR.MICRO) | (CURRENT.AGE.REV) | CVS Branch name | Tag name
# --------------------+-------------------+-----------------+-----------------
#     0.9.99          |     0.0.999       |      HEAD       | sowin-0-9-99
#
#
# **************************************************************************
# Footnotes
# =========
#
# ¹ Application Binary Interface. This covers any publicly exposed
#   functions, function signatures, structures (and classes for C++
#   code). If any functions has been removed or changed, or if any
#   structures/classes has been modified in any way, the ABI has
#   most likely been made incompatible with earlier releases.
#
# ² Application Programmer's Interface. This is the functions and data
#   structures/classes exposed to the application programmer for
#   interaction with the library.
#
# **************************************************************************

SOWIN_MAJOR_VERSION=0
SOWIN_MINOR_VERSION=9
SOWIN_MICRO_VERSION=99
SOWIN_VERSION=$SOWIN_MAJOR_VERSION.$SOWIN_MINOR_VERSION.$SOWIN_MICRO_VERSION
VERSION=$SOWIN_VERSION

AC_SUBST(SOWIN_MAJOR_VERSION)
AC_SUBST(SOWIN_MINOR_VERSION)
AC_SUBST(SOWIN_MICRO_VERSION)
AC_SUBST(SOWIN_VERSION)

# Libtool versioning
LT_CURRENT=$SOWIN_MAJOR_VERSION
LT_AGE=0
LT_REVISION=`expr $SOWIN_MINOR_VERSION \* 100 + $SOWIN_MICRO_VERSION`

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)


AC_DEFINE_UNQUOTED(SOWIN_MAJOR_VERSION, $SOWIN_MAJOR_VERSION,
  [Define to the major version of SoWin])
AC_DEFINE_UNQUOTED(SOWIN_MINOR_VERSION, $SOWIN_MINOR_VERSION,
  [Define to the minor version of SoWin])
AC_DEFINE_UNQUOTED(SOWIN_MICRO_VERSION, $SOWIN_MICRO_VERSION,
  [Define to the micro version of SoWin])
AC_DEFINE_UNQUOTED(SOWIN_VERSION, "$SOWIN_VERSION",
  [Version string for SoWin])

# **************************************************************************
#  Locate C++ compiler and set C++ as the default language to use
#  in tests. The configure script will automatically terminate if
#  it doesn't find a C++ compiler.

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_LANG(C++)

AC_OBJEXT
AC_EXEEXT

# **************************************************************************

AM_INIT_AUTOMAKE(SoWin, $SOWIN_VERSION)

AM_CONFIG_HEADER(config.h)

AM_DISABLE_STATIC
AM_MAINTAINER_MODE

# don't use CygWin's ranlib on static library
if $BUILD_WITH_MSVC; then
  RANLIB=true
  export RANLIB
else
  AC_PROG_LIBTOOL
  AC_LANG(C)
  AC_LANG(C++)
fi

# These are used for constructing the sowin-config file.
SOWIN_EXTRA_CPPFLAGS=$CPPFLAGS
SOWIN_EXTRA_CXXFLAGS=$CXXFLAGS
SOWIN_EXTRA_CFLAGS=$CFLAGS
SOWIN_EXTRA_LDFLAGS=$LDFLAGS
SOWIN_EXTRA_LIBS=$LIBS
AC_SUBST(SOWIN_EXTRA_CPPFLAGS)
AC_SUBST(SOWIN_EXTRA_CXXFLAGS)
AC_SUBST(SOWIN_EXTRA_CFLAGS)
AC_SUBST(SOWIN_EXTRA_LDFLAGS)
AC_SUBST(SOWIN_EXTRA_LIBS)

sim_ac_build_library=true
AC_ARG_ENABLE(
  [build],
  [AC_HELP_STRING([--disable-build], [disable configuring for library build])],
  [case $enableval in
    no | false) sim_ac_build_library=false ;;
  esac])

if $sim_ac_build_library; then

# **************************************************************************
# Header files we might want.

AC_CHECK_HEADERS([windows.h unistd.h sys/types.h sys/time.h X11/extensions/SGIMisc.h X11/Xproto.h X11/extensions/XInput.h netinet/in.h])

# **************************************************************************
# Compiler control.

SIM_AC_COMPILE_DEBUG(
  [CPPFLAGS="$CPPFLAGS -DSOWIN_DEBUG=1"],
  [CPPFLAGS="$CPPFLAGS -DSOWIN_DEBUG=0"])

SIM_AC_CHECK_VAR_FUNCTIONNAME

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS


SIM_AC_SOGUI_STATIC_DEFAULTS

fi

# **************************************************************************
# Variable substitutions for using libSoQt in the generic code.

GUI=WIN
Gui=Win
gui=win
WIDGET="HWND"
EVENT="MSG *"
COMPONENTHEADER=""

AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(GUI)
AC_SUBST(WIDGET)
AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)

if $sim_ac_build_library; then
# **************************************************************************
# Search for and set up stuff we depend on.

# check for Coin library and its dependencies
SIM_AC_HAVE_COIN_IFELSE([
  CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
  LDFLAGS="$LDFLAGS $sim_ac_coin_ldflags"
  LIBS="$sim_ac_coin_libs $LIBS"
  SOWIN_EXTRA_CPPFLAGS="$SOWIN_EXTRA_CPPFLAGS $sim_ac_coin_cppflags"
  SOWIN_EXTRA_LDFLAGS="$SOWIN_EXTRA_LDFLAGS $sim_ac_coin_ldflags"
  SOWIN_EXTRA_LIBS="$sim_ac_coin_libs $SOWIN_EXTRA_LIBS"
], AC_MSG_ERROR(couldn't compile and link against Coin))

# **************************************************************************
# misc implementation-dependent Open Inventor features

SIM_AC_HAVE_INVENTOR_NODE(SoPolygonOffset)

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoKeyboardEvent::DELETE enum],
  [#include <Inventor/events/SoKeyboardEvent.h>], [
   /* This is either DELETE or KEY_DELETE */
   SoKeyboardEvent::Key key = SoKeyboardEvent::DELETE;],
  [HAVE_SOKEYBOARDEVENT_DELETE])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoMouseButtonEvent::BUTTON5 enum],
  [#include <Inventor/events/SoMouseButtonEvent.h>], [
   /* mouse wheel support needs BUTTON4 and BUTTON5 */
   SoMouseButtonEvent::Button button = SoMouseButtonEvent::BUTTON5;],
  [HAVE_SOMOUSEBUTTONEVENT_BUTTON5])

SIM_AC_HAVE_INVENTOR_FEATURE(
  [for SoCamera::setStereoMode() function],
  [#include <Inventor/nodes/SoPerspectiveCamera.h>], [
   /* SoCamera is abstract, so test with SoPerspectiveCamera */
   SoPerspectiveCamera * c = new SoPerspectiveCamera;
   c->setStereoMode(SoCamera::MONOSCOPIC);],
  [HAVE_SOCAMERA_SETSTEREOMODE])

# **************************************************************************
# Misc set-up.

SIM_EXPAND_DIR_VARS

# Functions from the gdi32.lib library is used.
LIBS="$LIBS -lgdi32"
SOWIN_EXTRA_LIBS="$SOWIN_EXTRA_LIBS -lgdi32"

# Functions from the user32.lib library is used.
LIBS="$LIBS -luser32"
SOWIN_EXTRA_LIBS="$SOWIN_EXTRA_LIBS -luser32"

# **************************************************************************

AC_ARG_WITH(
  [alternate],
  [AC_HELP_STRING([--with-alternate=string],
                  [specify name of alternate configuration])],
  [CONFIG=$withval],
  [CONFIG=default])

AC_SUBST(CONFIG)

AC_ARG_WITH(
  [suffix],
  [AC_HELP_STRING([--with-suffix=string],
                  [specify library name suffix (e.g. "d" for debug)])],
  [SUFFIX=$withval],
  [SUFFIX=])

AC_SUBST(SUFFIX)

INSTALL_HEADER="\
INSTALL='\$(INSTALL_DATA)' \$(SHELL) \$(top_srcdir)/cfg/install-header"
AC_SUBST(INSTALL_HEADER)

fi

AC_ARG_WITH(
  [html],
  [AC_HELP_STRING([--with-html], [build SoWin HTML documentation])],
  [case $withval in
    yes | true) want_html=true ;;
    no | false) want_html=false ;;
    *) AC_MSG_ERROR([bad value "$withval" for --with-html]) ;;
  esac],
  [want_html=false])

AC_ARG_WITH(
  [man],
  [AC_HELP_STRING([--with-man], [build SoWin man pages])],
  [case $withval in
    yes | true) want_man=true ;;
    no | false) want_man=false ;;
    *) AC_MSG_ERROR([bad value "$withval" for --with-man]) ;;
  esac],
  [want_man=false])

SOWIN_DOC_HTML=NO
if $want_html; then
  SOWIN_DOC_HTML=YES
fi

SOWIN_DOC_MAN=NO
if $want_man; then
  SOWIN_DOC_MAN=YES
fi

AC_SUBST(SOWIN_DOC_HTML)
AC_SUBST(SOWIN_DOC_MAN)

sowin_dox_build_dir=`pwd`
sowin_dox_src_dir=`cd $srcdir; pwd`
AC_SUBST(sowin_dox_src_dir)
AC_SUBST(sowin_dox_build_dir)

case $host in
  *-cygwin) path_tag="<PATH>" ;;
  *)        path_tag= ;;
esac
AC_SUBST(path_tag)

# **************************************************************************
# Remove redundant options from certain option lists.

SIM_AC_UNIQIFY_LIST(SOWIN_EXTRA_CPPFLAGS, -I$includedir $SOWIN_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(SOWIN_EXTRA_CXXFLAGS, -I$includedir $SOWIN_EXTRA_CXXFLAGS)
SIM_AC_UNIQIFY_LIST(SOWIN_EXTRA_CFLAGS, -I$includedir $SOWIN_EXTRA_CFLAGS)
SIM_AC_UNIQIFY_LIST(SOWIN_EXTRA_LDFLAGS, -L$libdir $SOWIN_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(SOWIN_EXTRA_LIBS, $SOWIN_EXTRA_LIBS)

SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(CXXFLAGS, $CXXFLAGS)
SIM_AC_UNIQIFY_LIST(CFLAGS, $CFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

case $enable_static in
yes | true)  SOWIN_STATIC=true;;
*)           SOWIN_STATIC=false;;
esac

case $enable_shared in
yes | true)  SOWIN_SHARED=true;;
*)           SOWIN_SHARED=false;;
esac

LIBFLAGS=
AC_SUBST(LIBFLAGS)

# **************************************************************************
# Remaining setup based on platform.

AM_CONDITIONAL(BUILD_WITH_MSVC, $BUILD_WITH_MSVC)

if $sim_ac_build_library; then
if $BUILD_WITH_MSVC; then
  if $SOWIN_STATIC; then
    :
    CPPFLAGS="$CPPFLAGS -DSOWIN_NOT_DLL"
    # SOWIN_EXTRA_CPPFLAGS is set up further down
  else
    CPPFLAGS="-DSOWIN_MAKE_DLL $CPPFLAGS"
    SOWIN_EXTRA_CPPFLAGS="$SOWIN_EXTRA_CPPFLAGS -DSOWIN_DLL"
  fi

  debugfile="`pwd`/src/Inventor/Win/sowin$SOWIN_MAJOR_VERSION.pdb"
  debugfile=`cygpath -w "$debugfile" | sed 's,\\\\,\\\\\\\\,g'`
  if $SOWIN_STATIC; then
    SIM_AC_CONFIGURATION_SETTING([SoWin build type], [static .lib])
    LIBFLAGS="-LIB"
    LIBFLAGS="$LIBFLAGS /OUT:sowin$SOWIN_MAJOR_VERSION$SUFFIX.lib"
    SOWIN_EXTRA_CPPFLAGS="-I$includedir -DSOWIN_NOT_DLL"
    SOWIN_EXTRA_LDFLAGS="-L$libdir"
    SOWIN_EXTRA_LIBS=
  else
    LIBFLAGS="-DLL /INCREMENTAL:NO"
    case $enable_symbols in
    no | false)
      SIM_AC_CONFIGURATION_SETTING([SoWin build type],
                                   [dynamic .dll, no symbols])
      LIBFLAGS="$LIBFLAGS /RELEASE"
      ;;
    *)
      SIM_AC_CONFIGURATION_SETTING([SoWin build type], [dynamic .dll + .pdb])
      CXXFLAGS="/Fd$debugfile $CXXFLAGS"
      CFLAGS="/Fd$debugfile $CFLAGS"
      LIBFLAGS="$LIBFLAGS /DEBUG /PDB:sowin$SOWIN_MAJOR_VERSION$SUFFIX.pdb"
      ;;
    esac
    LIBFLAGS="$LIBFLAGS /OUT:sowin$SOWIN_MAJOR_VERSION$SUFFIX.dll"
  fi

  # We use a version suffix on the .dll-file, so several incompatible
  # (major) versions can be installed on a system.
  #
  # BTW, when linking DLLs, the 3rd-party .lib files will be
  # linked into the .dll file. I believe it is still advisable to
  # list all libs used upon `sowin-config --libs`, as we can then
  # also use them from "parent" code (remember that their interfaces
  # is not exposed from the DLL) without any fuss.
  SOWIN_EXTRA_LIBS="-lsowin$SOWIN_MAJOR_VERSION$SUFFIX $SOWIN_EXTRA_LIBS"
  win_srcdir=`cd $srcdir; pwd`
  win_srcdir=`cygpath -w "$srcdir" | sed 's,\\\\,\\\\\\\\,g'`
  AC_SUBST(win_srcdir)
else
  SOWIN_EXTRA_LIBS="-lSoWin $SOWIN_EXTRA_LIBS"

  # For the build/sowin.spec RPM specification file.
  SIM_AC_ISO8601_DATE(sowin_configure_date)
  AC_SUBST(sowin_configure_date)
fi
else
  SIM_AC_CONFIGURATION_SETTING([SoWin build type], [build disabled])
fi

# **************************************************************************
# Configure the submodule with the examples.

# AC_CONFIG_SUBDIRS(data)

# **************************************************************************
# finally generate all the directories, makefiles, autogenerated
# sourcefiles, and config headers.

AC_OUTPUT([
	Makefile
	src/Inventor/Win/Makefile
	src/Inventor/Win/devices/Makefile
	src/Inventor/Win/widgets/Makefile
	src/Inventor/Win/viewers/Makefile
	build/sowin.doxygen
])

SIM_AC_CONFIGURATION_SETTING([Installation Prefix], [$prefix])

SIM_AC_CONFIGURATION_SUMMARY

echo ""
echo "Now, run 'make install' to build and install."
echo ""

# **************************************************************************
